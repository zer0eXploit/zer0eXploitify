import axios from "axios";
import { NextApiRequest, NextApiResponse } from "next";

const {
  SPOTIFY_CLIENT_ID: clientID,
  SPOTIFY_REDIRECT_URI: redirectURI,
  SPOTIFY_CLIENT_SECRET: clientSecret,
} = process.env;

interface ErrorResponseData {
  message: string;
}

interface SpotifyAuthData {
  expires_in: number;
  access_token: string;
  refresh_token: string;
}

interface SuccessResponseData {
  message: string;
  data: SpotifyAuthData;
}

const spotify = axios.create({
  baseURL: "https://accounts.spotify.com",
});

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<SuccessResponseData | ErrorResponseData>
) {
  const { code } = req.query;

  if (!code) {
    return res.status(400).json({ message: "Authorization code is required." });
  }

  const response = await spotify({
    url: "/api/token",
    method: "POST",
    params: {
      code,
      grant_type: "authorization_code",
      redirect_uri: redirectURI,
    },
    headers: {
      Authorization: `Basic ${Buffer.from(
        clientID + ":" + clientSecret
      ).toString("base64")}`,
      "Content-Type": "application/x-www-form-urlencoded",
    },
  }).catch((e) => console.error(e?.response?.data));

  if (response?.data) {
    const { access_token, refresh_token } = response.data;

    return res
      .status(200)
      .redirect(
        `/auth?accessToken=${access_token}&refreshToken=${refresh_token}`
      );
  }

  return res.status(400).json({
    message: "Could not get tokens from Spotify.",
  });
}

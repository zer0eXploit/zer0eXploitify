import axios from "axios";
import { NextApiRequest, NextApiResponse } from "next";

const {
  SPOTIFY_CLIENT_ID: clientID,
  SPOTIFY_REDIRECT_URI: redirectURI,
  SPOTIFY_CLIENT_SECRET: clientSecret,
  SPOTIFY_REQUIRED_SCOPES: requiredScopes,
} = process.env;
const baseURL = "https://accounts.spotify.com";

async function processPOST(refreshToken: string): Promise<{
  accessToken: string | Error;
}> {
  try {
    const response = await axios({
      url: baseURL + "/api/token",
      method: "POST",
      data: {
        grant_type: "refresh_token",
        refresh_token: refreshToken,
      },
      headers: {
        Authorization: `Basic ${Buffer.from(
          clientID + ":" + clientSecret
        ).toString("base64")}`,
        "Content-Type": "application/x-www-form-urlencoded",
      },
    });

    const { access_token } = response.data;

    return {
      accessToken: access_token,
    };
  } catch (e: any) {
    console.error(e);
    return e;
  }
}

const spotifyAuthUrl = `${baseURL}/authorize?client_id=${clientID}&response_type=code&redirect_uri=${redirectURI}&scope=${requiredScopes}`;

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  switch (req.method) {
    case "GET":
      return res.redirect(spotifyAuthUrl);

    case "POST": {
      let { refreshToken } = req.body;
      const data = await processPOST(refreshToken);
      if (data instanceof Error) {
        return res.status(401).json(data);
      }

      return res.json(data);
    }

    default:
      return res.redirect(spotifyAuthUrl);
  }
}

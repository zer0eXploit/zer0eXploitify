import { FC, useState } from "react";
import { BeatLoader } from "react-spinners";
import { Image, Flex, Heading, Tooltip, useToast } from "@chakra-ui/react";

import { useAuth } from "../../context/auth-context";

import { spotifyAPI } from "../../utils";

interface CmpProps {
  title: string;
  imageUrl: string;
  spotifyUri: string;
  maxWidth?: string;
}

const fallbackUrl =
  "https://images.unsplash.com/photo-1644365977963-e96e883a8e74?w=500&h=500&fit=crop";

export const MediaCard: FC<CmpProps> = ({
  title,
  imageUrl,
  spotifyUri: context_uri,
  maxWidth = "150px",
}) => {
  const toast = useToast();
  const { accessToken } = useAuth();
  const [pendingPlay, setPendingPlay] = useState(false);

  if (!title || !context_uri) return <></>;

  return (
    <Flex
      gap="1rem"
      cursor="pointer"
      direction="column"
      margin="0.5rem"
      maxWidth={maxWidth}
      onClick={async () => {
        let payload: any = { context_uri };
        if (context_uri.includes("track")) {
          payload = { uris: [context_uri] };
        }

        setPendingPlay(true);
        await spotifyAPI
          .put("/me/player/play", payload, {
            headers: { authorization: `Bearer ${accessToken}` },
          })
          .then(() => {
            toast({
              status: "success",
              position: "top",
              duration: 1500,
              description: `Curently playing: ${title}`,
            });
            setPendingPlay(false);
          })
          .catch((e) => {
            toast({
              status: "error",
              position: "top",
              isClosable: true,
              title: "Operation Error",
              description:
                "Error playing. Please try again. If the error persists, please refresh the page.",
            });
            setPendingPlay(false);
          });
      }}
    >
      <Image
        src={imageUrl ?? fallbackUrl}
        alt={title}
        borderRadius="sm"
        width="170px"
        height="170px"
        maxWidth="170px"
        loading="lazy"
        fit="cover"
      />

      {pendingPlay ? (
        <BeatLoader size={"12"} />
      ) : (
        <Tooltip label={title}>
          <Heading fontSize="sm" noOfLines={1}>
            {title}
          </Heading>
        </Tooltip>
      )}
    </Flex>
  );
};

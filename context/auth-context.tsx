import { useLocalStorage } from "../hooks/use-local-storage";
import { ReactNode, useContext, useCallback, createContext } from "react";

interface AuthData {
  accessToken: string;
  refreshToken: string;
}

export interface AuthContext extends AuthData {
  setAuthData: (data: AuthData) => void;
}

interface AuthProviderProps {
  children: ReactNode;
}

const AuthContext = createContext({} as AuthContext);

export function AuthProvider({ children }: AuthProviderProps) {
  const [data, setData] = useLocalStorage("auth", {} as AuthData);

  const value: AuthContext = {
    accessToken: data?.accessToken,
    refreshToken: data?.refreshToken,
    setAuthData: useCallback(
      (data: AuthData) => {
        setData(data);
      },
      [setData]
    ),
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);

  if (!context)
    throw new Error(`useAuth must be used within AuthProvider Component`);

  return context;
}
